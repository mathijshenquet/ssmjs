{
  "version": 3,
  "file": "cpu.js",
  "sourceRoot": "..\\",
  "sources": [
    "src\\cpu.coffee"
  ],
  "names": [],
  "mappings": ";AACC;AAAA,MAAA,EAAA,EAAA,EAAA,EAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA;;EAAA,IAAO,gDAAP;IACE,MAAA,GAAS,OADX;;;EAGC,KAAA,GAAQ,QAAA,CAAC,EAAD,CAAA;AACT,QAAA,EAAA,EAAA;IAAE,EAAA,GAAK,IAAI,QAAJ,CAAa,MAAb,EAAqB,CAAA,SAAA,CAAA,CAAY,EAAZ,CAAA,EAAA,CAArB;IACL,GAAA,GAAM,IAAI,QAAJ,CAAa,MAAb,EAAqB,CAAA,eAAA,CAAA,CAAkB,EAAlB,CAAA,SAAA,CAArB;WACN,QAAA,CAAC,QAAD,CAAA;AACF,UAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA;MAAI,CAAA,GAAI,IAAC,CAAA,GAAD,CAAA;MACJ,CAAA,GAAI,IAAC,CAAA,GAAD,CAAA;MAEJ,KAAA,GAAQ,EAAA,CAAG,CAAC,CAAC,KAAL,EAAY,CAAC,CAAC,KAAd;MACR,KAAA,GAAW,iBAAA,IAAY,iBAAZ,IAAwB,CAAK,gBAAL,CAA3B,GAAgD,GAAA,CAAI,CAAC,CAAC,KAAN,EAAa,CAAC,CAAC,KAAf,CAAhD,GAA2E;aAEnF,IAAC,CAAA,IAAD,CAAM,KAAN,qBAAc,WAAW,KAAzB;IAPF;EAHO;;EAYR,OAAA,GAAU,QAAA,CAAC,EAAD,CAAA;AACX,QAAA,EAAA,EAAA;IAAE,EAAA,GAAK,IAAI,QAAJ,CAAa,MAAb,EAAqB,CAAA,UAAA,CAAA,CAAa,EAAb,CAAA,YAAA,CAArB;IACL,GAAA,GAAM,IAAI,QAAJ,CAAa,MAAb,EAAqB,CAAA,eAAA,CAAA,CAAkB,EAAlB,CAAA,SAAA,CAArB;WACN,QAAA,CAAC,QAAD,CAAA;AACF,UAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA;MAAI,CAAA,GAAI,IAAC,CAAA,GAAD,CAAA;MACJ,CAAA,GAAI,IAAC,CAAA,GAAD,CAAA;MAEJ,KAAA,GAAQ,EAAA,CAAG,CAAC,CAAC,KAAL,EAAY,CAAC,CAAC,KAAd;MACR,KAAA,GAAW,iBAAA,IAAY,iBAAZ,IAAwB,CAAK,gBAAL,CAA3B,GAAgD,GAAA,CAAI,CAAC,CAAC,KAAN,EAAa,CAAC,CAAC,KAAf,CAAhD,GAA2E;aAEnF,IAAC,CAAA,IAAD,CAAM,KAAN,qBAAc,WAAW,KAAzB;IAPF;EAHS;;EAYV,MAAM,CAAC,iBAAP,GAA2B;IAC1B,GAAA,EAAK,KAAA,CAAM,GAAN,CADqB;IAE1B,GAAA,EAAK,KAAA,CAAM,GAAN,CAFqB;IAG1B,GAAA,EAAK,KAAA,CAAM,GAAN,CAHqB;IAI1B,GAAA,EAAK,KAAA,CAAM,GAAN,CAJqB;IAK1B,GAAA,EAAK,KAAA,CAAM,GAAN,CALqB;IAO1B,GAAA,EAAK,QAAA,CAAC,QAAD,CAAA;AACP,UAAA,KAAA,EAAA;MAAI,CAAA,CAAC,KAAD,EAAQ,KAAR,CAAA,GAAiB,IAAC,CAAA,GAAD,CAAA,CAAjB;aACA,IAAC,CAAA,IAAD,CAAM,CAAC,KAAP,EAAc,CAAA,EAAA,CAAA,oBAAK,WAAW,KAAhB,CAAA,CAAA,CAAd;IAFG,CAPqB;IAW1B,EAAA,EAAI,OAAA,CAAQ,IAAR,CAXsB;IAY1B,EAAA,EAAI,OAAA,CAAQ,IAAR,CAZsB;IAa1B,EAAA,EAAI,OAAA,CAAQ,GAAR,CAbsB;IAc1B,EAAA,EAAI,OAAA,CAAQ,GAAR,CAdsB;IAe1B,EAAA,EAAI,OAAA,CAAQ,IAAR,CAfsB;IAgB1B,EAAA,EAAI,OAAA,CAAQ,IAAR,CAhBsB;IAkB1B,EAAA,EAAI,KAAA,CAAM,GAAN,CAlBsB;IAmB1B,GAAA,EAAK,KAAA,CAAM,GAAN,CAnBqB;IAqB1B,GAAA,EAAK,QAAA,CAAC,QAAD,CAAA;AACP,UAAA,KAAA,EAAA;MAAI,CAAA,CAAC,KAAD,EAAQ,KAAR,CAAA,GAAiB,IAAC,CAAA,GAAD,CAAA,CAAjB;aACA,IAAC,CAAA,IAAD,CAAM,KAAA,GAAQ,MAAd,EAAsB,CAAA,EAAA,CAAA,oBAAK,WAAW,CAAC,CAAC,KAAlB,CAAA,CAAA,CAAtB;IAFG,CArBqB;IAyB1B,GAAA,EAAK,QAAA,CAAC,CAAD,EAAI,KAAJ,CAAA;aACH,IAAC,CAAA,IAAD,CAAM,CAAN,kBAAS,QAAQ,CAAjB;IADG,CAzBqB;IA4B1B,GAAA,EAAK,QAAA,CAAC,SAAD,EAAY,KAAZ,CAAA;AACP,UAAA;MAAI,EAAA,GAAK,IAAC,CAAA,KAAD,CAAO,SAAP;aACL,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,GAAD,CAAK,EAAL,CAAN,kBAAiB,QAAQ,IAAC,CAAA,GAAD,CAAK,EAAL,EAAS,OAAT,CAAzB;IAFG,CA5BqB;IAgC1B,GAAA,EAAK,QAAA,CAAC,SAAD,EAAY,QAAZ,CAAA;AACP,UAAA,KAAA,EAAA;MAAI,CAAA,CAAC,KAAD,EAAQ,KAAR,CAAA,GAAiB,IAAC,CAAA,GAAD,CAAA,CAAjB;aACA,IAAC,CAAA,GAAD,CAAK,IAAC,CAAA,KAAD,CAAO,SAAP,CAAL,EAAwB,KAAxB,qBAAgC,WAAW,KAA3C;IAFG,CAhCqB;IAoC1B,GAAA,EAAK,QAAA,CAAC,CAAD,EAAI,KAAJ,CAAA;AACP,UAAA;MAAI,IAAA,GAAO,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS;MAChB,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,IAAD,CAAM,IAAN,CAAN,kBAAoB,QAAQ,IAAC,CAAA,IAAD,CAAM,IAAN,EAAY,OAAZ,CAA5B;aACA,IAAC,CAAA,GAAG,CAAC,IAAI,CAAC,IAAD,CAAT,GAAkB;IAHf,CApCqB;IAyC1B,GAAA,EAAK,QAAA,CAAC,CAAD,EAAI,QAAJ,CAAA;AACP,UAAA,KAAA,EAAA;MAAI,CAAA,CAAC,KAAD,EAAQ,KAAR,CAAA,GAAiB,IAAC,CAAA,GAAD,CAAA,CAAjB;aACA,IAAC,CAAA,KAAD,CAAQ,IAAC,CAAA,GAAD,CAAK,EAAL,CAAA,GAAW,CAAC,CAAA,GAAE,CAAH,CAAnB,EAA2B,KAA3B,qBAAmC,WAAW,KAA9C;IAFG,CAzCqB;IA6C1B,GAAA,EAAK,QAAA,CAAC,CAAD,EAAI,QAAJ,CAAA;aACD,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,GAAD,CAAK,EAAL,CAAA,GAAW,CAAjB,CAAN,qBAA4B,WAAW,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,GAAD,CAAK,EAAL,CAAA,GAAW,CAAjB,EAAoB,OAApB,CAAvC;IADC,CA7CqB;IAgD1B,GAAA,EAAK,QAAA,CAAC,CAAD,EAAI,QAAJ,CAAA;AACP,UAAA,KAAA,EAAA;MAAM,CAAA,CAAC,KAAD,EAAQ,KAAR,CAAA,GAAiB,IAAC,CAAA,GAAD,CAAA,CAAjB;aACA,IAAC,CAAA,KAAD,CAAQ,IAAC,CAAA,GAAD,CAAK,EAAL,CAAA,GAAW,CAAnB,EAAuB,KAAvB,qBAA+B,WAAW,KAA1C;IAFC,CAhDqB;IAoD1B,GAAA,EAAK,QAAA,CAAC,IAAD,CAAA;MAAU,IAAe,IAAC,CAAA,GAAD,CAAA,CAAM,CAAC,KAAP,KAAgB,CAA/B;eAAA,IAAC,CAAA,IAAD,CAAM,IAAN,EAAA;;IAAV,CApDqB;IAqD1B,GAAA,EAAK,QAAA,CAAC,IAAD,CAAA;MAAU,IAAe,IAAC,CAAA,GAAD,CAAA,CAAM,CAAC,KAAP,KAAgB,CAA/B;eAAA,IAAC,CAAA,IAAD,CAAM,IAAN,EAAA;;IAAV,CArDqB;IAsD1B,GAAA,EAAK,QAAA,CAAC,IAAD,CAAA;aAAU,IAAC,CAAA,IAAD,CAAM,IAAN;IAAV,CAtDqB;IAuD1B,GAAA,EAAK,QAAA,CAAC,IAAD,CAAA;MAAU,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,GAAD,CAAK,EAAL,CAAN,EAAgB,WAAhB;aAA8B,IAAC,CAAA,IAAD,CAAM,IAAN;IAAxC,CAvDqB;IAyD1B,IAAA,EAAM,QAAA,CAAC,CAAD,CAAA;AACR,UAAA,CAAA,EAAA,GAAA,EAAA;MAAI,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,GAAD,CAAK,EAAL,CAAN,EAAgB,WAAhB;MACA,IAAC,CAAA,GAAD,CAAK,EAAL,EAAS,IAAC,CAAA,GAAD,CAAK,EAAL,CAAT;AACA;MAAA,KAAI,oEAAJ;qBACE,IAAC,CAAA,IAAD,CAAM,CAAN;MADF,CAAA;;IAHI,CAzDoB;IA+D1B,MAAA,EAAQ,QAAA,CAAA,CAAA;MACN,IAAC,CAAA,GAAD,CAAK,EAAL,EAAS,IAAC,CAAA,GAAD,CAAK,EAAL,CAAT;aACA,IAAC,CAAA,GAAD,CAAK,EAAL,EAAS,IAAC,CAAA,GAAD,CAAA,CAAM,CAAC,KAAhB;IAFM,CA/DkB;IAmE1B,GAAA,EAAK,QAAA,CAAC,IAAD,CAAA;aAAU,IAAC,CAAA,GAAD,CAAK,EAAL,EAAS,IAAC,CAAA,GAAD,CAAA,CAAM,CAAC,KAAhB;IAAV,CAnEqB;IAqE1B,GAAA,EAAK,QAAA,CAAC,CAAD,CAAA;aAAO,IAAC,CAAA,GAAD,CAAK,EAAL,EAAS,IAAC,CAAA,GAAD,CAAK,EAAL,CAAA,GAAW,CAApB;IAAP,CArEqB;IAuE1B,IAAA,EAAM,QAAA,CAAA,CAAA;aAAG,IAAC,CAAA,MAAD,GAAU;IAAb,CAvEoB;IAyE1B,MAAA,EAAQ,QAAA,CAAC,SAAD,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,KAAvB,EAA8B,IAA9B,CAAA;AACV,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;MAAI,OAAO,CAAC,GAAR,CAAY,SAAZ;MACA,GAAA,GAAM,IAAC,CAAA,KAAD,CAAO,SAAP;MACN,OAAO,CAAC,GAAR,CAAY,IAAC,CAAA,CAAC,CAAC,GAAD,CAAd,EAAqB,GAArB,EAA0B,IAA1B,EAAgC,KAAhC,EAAuC,IAAvC;AACA;MAAA,KAAS,8HAAT;QACE,OAAO,CAAC,GAAR,CAAY,CAAZ;qBACA,IAAC,CAAA,GAAG,CAAC,MAAM,CAAC,CAAD,CAAX,GAAiB,CAAC,KAAD,EAAQ,IAAR;MAFnB,CAAA;;IAJM,CAzEkB;IAiF1B,GAAA,EAAK,QAAA,CAAA,CAAA,EAAA,CAjFqB;IAmF1B,IAAA,EAAM,QAAA,CAAC,CAAD,CAAA;aACJ;QACE,CAAC,CAAA,CAAA,GAAA;iBAAG,IAAI,CAAC,KAAL,CAAW,IAAC,CAAA,IAAD,CAAA,CAAX;QAAH,CAAD,CADF;OAEC,CAAC,CAAD,CAFD,CAAA;IADI;EAnFoB;;EA0F3B,EAAA,GAAK;;EACL,EAAA,GAAK;;EACL,EAAA,GAAK;;EACL,EAAA,GAAK;;EACL,EAAA,GAAK;;EAEC,aAAN,MAAA,WAAA;IACC,WAAa,CAAC,MAAD,CAAA;AACf,UAAA;MAAI,IAAC,CAAA,MAAD,GAAU,MAAA,GAAS,IAAI,WAAJ,CAAgB,MAAhB;MAEnB,IAAC,CAAA,GAAD,GAAO,IAAI,YAAJ,CAAiB,MAAjB;MAEP,IAAC,CAAA,GAAD,GAAO,IAAI,WAAJ,CAAgB,MAAhB;MACP,IAAC,CAAA,GAAD,GAAO,IAAI,UAAJ,CAAe,MAAf;MACP,IAAC,CAAA,GAAD,GAAO,IAAI,YAAJ,CAAiB,MAAjB;MAEP,IAAC,CAAA,GAAD,GAAO,IAAI,WAAJ,CAAgB,MAAhB;MACP,IAAC,CAAA,GAAD,GAAO,IAAI,UAAJ,CAAe,MAAf;MAEP,IAAC,CAAA,EAAD,GAAM,IAAI,UAAJ,CAAe,MAAf;MACN,IAAC,CAAA,EAAD,GAAM,IAAI,SAAJ,CAAc,MAAd;MAEN,IAAC,CAAA,MAAD,GAAU,CAAA;MACV,IAAC,CAAA,KAAD,GAAS,CAAA;MAET,IAAC,CAAA,OAAD,GAAW,CAAA;MACX,IAAC,CAAA,IAAD,GAAQ,CAAA;MAER,IAAC,CAAA,GAAD,GAAO,IAAC,CAAA;MACR,IAAC,CAAA,GAAD,GAAO,IAAC,CAAA;MACR,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA;IAvBC;;EADd;;EA0BM,MAAM,CAAC,YAAb,MAAA,UAAA;IACC,WAAa,aAAA,CAAA;MAAC,IAAC,CAAA;MACb,IAAC,CAAA,IAAD,GAAQ;MACR,IAAC,CAAA,MAAD,GAAU,CAAA;MACV,IAAC,CAAA,KAAD,CAAA;IAHW;;IAKb,KAAO,CAAA,CAAA;AACT,UAAA,GAAA,EAAA;MAAI,IAAC,CAAA,OAAD,GAAW;MAEX,IAAC,CAAA,OAAD,GAAW;MACX,IAAC,CAAA,OAAD,GAAW,CAAC;MAEZ,IAAC,CAAA,GAAD,GAAO,IAAI,UAAJ,CAAe,CAAA,GAAI,IAAC,CAAA,OAApB;MAEP,IAAC,CAAA,QAAD,GAAY;MAEZ,IAAC,CAAA,GAAD,GAAO,IAAI,UAAJ,CAAe,CAAA,GAAI,IAAC,CAAA,QAApB;MACP,IAAC,CAAA,CAAD,GAAK,IAAC,CAAA,GAAG,CAAC;MAEV,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS;MACT,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS,CAAC;MACV,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS,CAAC;MACV,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS,CAAC;MAEV,IAAC,CAAA,MAAD,GAAU;aAEV,IAAC,CAAA,MAAD,yFAAkC;IApB7B;;IAsBP,KAAO,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAA;AACT,UAAA,QAAA,EAAA,QAAA,EAAA;MAAI,QAAA,GAAW,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,IAAD;MACnB,QAAA,GAAW,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,IAAD;MACrB,UAAA,GAAa,IAAC,CAAA,GAAG,CAAC,OAAO,CAAC,IAAD;aAEzB,IAAC,CAAA,UAAD,CACE;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;UACF,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,IAAD,CAAR,GAAiB;UACjB,IAAC,CAAA,GAAG,CAAC,OAAO,CAAC,IAAD,CAAZ,GAAqB;UAErB,IAAG,aAAH;mBACE,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,IAAD,CAAV,GAAmB,MADrB;;QAJE,CAAJ;QAOA,IAAA,EAAM,QAAA,CAAA,CAAA;UACJ,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,IAAD,CAAR,GAAiB;UACjB,IAAC,CAAA,GAAG,CAAC,OAAO,CAAC,IAAD,CAAZ,GAAqB;iBACrB,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,IAAD,CAAV,GAAmB;QAHf;MAPN,CADF;IALK;;IAkBP,IAAM,CAAC,IAAD,EAAO,IAAP,CAAA;aAAgB,IAAC,CAAA,UAAD,CACpB;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;UACF,IAAC,CAAA,GAAG,CAAC,IAAI,CAAC,IAAD,CAAT,GAAkB;iBAClB,IAAC,CAAA,GAAG,gBAAC,OAAO,KAAR,CAAc,CAAC,IAAD;QAFhB,CAAJ;QAIA,IAAA,EAAM,QAAA,CAAA,CAAA,EAAA;MAJN,CADoB;IAAhB;;IAON,GAAK,CAAC,CAAD,EAAI,KAAJ,EAAW,KAAX,CAAA;AACP,UAAA,QAAA,EAAA,QAAA,EAAA;MAAI,QAAA,GAAW,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,CAAD;MACnB,QAAA,GAAW,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,CAAD;MACrB,UAAA,GAAa,IAAC,CAAA,GAAG,CAAC,OAAO,CAAC,CAAD;aAEzB,IAAC,CAAA,UAAD,CACE;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;UACF,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,CAAD,CAAR,GAAc;UACd,IAAC,CAAA,GAAG,CAAC,OAAO,CAAC,CAAD,CAAZ,GAAkB;UAElB,IAAG,aAAH;mBACE,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,CAAD,CAAV,GAAgB,MADlB;;QAJE,CAAJ;QAOA,IAAA,EAAM,QAAA,CAAA,CAAA;UACJ,IAAC,CAAA,GAAG,CAAC,GAAG,CAAC,CAAD,CAAR,GAAc;UACd,IAAC,CAAA,GAAG,CAAC,OAAO,CAAC,CAAD,CAAZ,GAAkB;iBAClB,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,CAAD,CAAV,GAAgB;QAHZ;MAPN,CADF;IALG;;IAkBL,GAAK,CAAC,CAAD,EAAI,IAAJ,CAAA;aAAa,IAAC,CAAA,UAAD,CAChB;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;UACF,IAAC,CAAA,GAAG,CAAC,IAAI,CAAC,CAAD,CAAT,GAAe;iBACf,IAAC,CAAA,GAAG,gBAAC,OAAO,KAAR,CAAc,CAAC,CAAD;QAFhB,CAAJ;QAIA,IAAA,EAAM,QAAA,CAAA,CAAA,EAAA;MAJN,CADgB;IAAb;;IAOL,IAAM,CAAC,IAAD,CAAA;AACR,UAAA,SAAA,EAAA;MAAI,KAAA,GAAQ,IAAC,CAAA,CAAC,CAAC,EAAD;MACV,SAAA,GAAY,IAAC,CAAA;aAEb,IAAC,CAAA,UAAD,CACE;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;AACV,cAAA,GAAA,EAAA;UAAQ,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS,IAAC,CAAA,MAAM,CAAC,IAAD;iBAChB,IAAC,CAAA,MAAD,yFAAkC;QAFhC,CAAJ;QAIA,IAAA,EAAM,QAAA,CAAA,CAAA;UACJ,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS;iBACT,IAAC,CAAA,MAAD,GAAU;QAFN;MAJN,CADF;IAJI;;IAaN,GAAK,CAAA,CAAA;aACH,IAAC,CAAA,UAAD,CACE;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;iBACF;YAAC,KAAA,EAAO,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,CAAC,CAAC,EAAD,CAAR,CAAR;YAAuB,KAAA,EAAO,IAAC,CAAA,GAAG,CAAC,KAAK,CAAC,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,EAAD;UAAxC;QADE,CAAJ;QAGA,IAAA,EAAM,QAAA,CAAA,CAAA;iBACJ,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF;QADI;MAHN,CADF;IADG;;IAQL,IAAM,CAAC,KAAD,EAAQ,KAAR,CAAA;AACR,UAAA;MAAI,UAAA,GAAa,IAAC,CAAA;aAEd,IAAC,CAAA,UAAD,CACE;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;UACF,IAAC,CAAA,KAAD,CAAO,EAAE,IAAC,CAAA,CAAC,CAAC,EAAD,CAAX,EAAiB,KAAjB,EAAwB,KAAxB;iBACA,IAAC,CAAA,OAAD,GAAW,IAAI,CAAC,GAAL,CAAS,IAAC,CAAA,OAAV,EAAmB,IAAC,CAAA,CAAC,CAAC,EAAD,CAArB;QAFT,CAAJ;QAIA,IAAA,EAAM,QAAA,CAAA,CAAA;UACJ,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF;iBACA,IAAC,CAAA,OAAD,GAAW;QAFP;MAJN,CADF;IAHI;;IAaN,IAAM,CAAA,CAAA;aAAG,IAAC,CAAA,UAAD,CACP;QAAA,EAAA,EAAI,QAAA,CAAA,CAAA;iBACF,IAAC,CAAA,IAAD,CAAM,IAAC,CAAA,CAAC,CAAC,EAAD,CAAR;QADE,CAAJ;QAEA,IAAA,EAAM,QAAA,CAAA,CAAA,EAAA;MAFN,CADO;IAAH;;IAKN,KAAO,CAAC,MAAD,CAAA;AAAW,UAAA;;;;;;;6DAMsB;IANjC;;IAQP,OAAS,CAAC,EAAD,CAAA;AAAO,UAAA;qEAAmC,CAAE,WAApC,CAAA;IAAR;;IAET,MAAQ,CAAC,QAAD,CAAA;AACV,UAAA;MAAI,IAAG,CAAC,QAAD,KAAa,QAAhB;QACE,EAAA,GAAK,SADP;OAAA,MAAA;QAGE,EAAA,GAAK,IAAC,CAAA,KAAD,CAAO,QAAP,EAHP;;AAKA,aAAO,IAAC,CAAA,CAAC,CAAC,EAAD;IANH;;IAQR,UAAY,CAAC,GAAD,CAAA;MACV,IAAC,CAAA,UAAU,CAAC,YAAY,CAAC,IAAzB,CAA8B,GAA9B;aACA,GAAG,CAAC,EAAE,CAAC,IAAP,CAAY,IAAZ;IAFU;;IAIZ,IAAM,KAAA,CAAA;AACR,UAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MADS,IAAC,CAAA;MACN,IAAC,CAAA,MAAD,8CAAuB,CAAE;MACzB,IAAC,CAAA,MAAD,GAAU,CAAA;MAEV,IAAA,GAAO;AACP;AAAA;MAAA,KAAA,sCAAA;;QACE,IAAG,WAAW,CAAC,KAAf;UACE,IAAC,CAAA,MAAM,CAAC,WAAW,CAAC,KAAb,CAAP,GAA6B,KAD/B;;qBAEA,IAAA;MAHF,CAAA;;IALI;;IAUN,GAAK,CAAA,CAAA;AACH,aAAM,IAAC,CAAA,IAAD,CAAA,CAAA,KAAW,IAAjB;AACE;MADF;MAEA,IAAC,CAAA,GAAG,CAAC,IAAL,GAAY,CAAA;MACZ,IAAC,CAAA,GAAG,CAAC,OAAL,GAAe,CAAA;MACf,IAAC,CAAA,GAAG,CAAC,IAAL,GAAY,CAAA;MACZ,IAAC,CAAA,GAAG,CAAC,OAAL,GAAe,CAAA;aACf;IAPG;;IASL,IAAM,CAAA,CAAA;AACR,UAAA,WAAA,EAAA;MAAI,IAAG,IAAC,CAAA,MAAJ;AACE,eAAO,MADT;;MAGA,IAAC,CAAA,UAAD,GAAc;QACZ,KAAA,EAAO,IAAC,CAAA,CAAC,CAAC,EAAD,CADG;QAEZ,YAAA,EAAc;MAFF;MAKd,WAAA,GAAc,IAAC,CAAA,IAAI,CAAC,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,EAAD;MACnB,IAAO,mBAAP;QACE,IAAC,CAAA,MAAD,GAAU;QACV,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF;AACA,eAAO,MAHT;;MAMA,IAAC,CAAA,IAAD,CAAM,WAAN;MACA,IAAC,CAAA,OAAO,CAAC,IAAT,CAAc,IAAC,CAAA,UAAf;MAEA,IAAC,CAAA,MAAD,8CAAuB,CAAE;AACzB,aAAO;IApBH;;IAsBN,IAAM,CAAA,CAAA;AACR,UAAA,MAAA,EAAA,GAAA,EAAA;MAAI,IAAG,CAAI,CAAA,UAAA,GAAa,IAAC,CAAA,OAAO,CAAC,GAAT,CAAA,CAAb,CAAP;AACE,eADF;;AAGA,aAAM,MAAA,GAAS,UAAU,CAAC,YAAY,CAAC,GAAxB,CAAA,CAAf;QACE,MAAM,CAAC,IAAI,CAAC,IAAZ,CAAiB,IAAjB;MADF;MAEA,IAAC,CAAA,CAAC,CAAC,EAAD,CAAF,GAAS,UAAU,CAAC;aACpB,IAAC,CAAA,MAAD,8CAAuB,CAAE;IAPrB;;IASN,IAAM,CAAC,WAAD,CAAA;AACR,UAAA;MAAI,IAAO,6CAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,WAAW,CAAC,MAA9B,CAAA,CAAV,EADR;;MAGA,IAAA,GAAO,EAAE,CAAC,MAAH,CAAU,WAAW,CAAC,IAAtB,EAA4B,WAAW,CAAC,IAAI,CAAC,KAA7C;MACP,IAAC,CAAA,YAAY,CAAC,WAAW,CAAC,MAAb,CAAoB,CAAC,KAAlC,CAAwC,IAAxC,EAA8C,IAA9C;IALI;;EA7LP;AArJD",
  "sourcesContent": [
    "\r\nif not global?\r\n  global = window\r\n\r\nbinOp = (op) ->\r\n  fn = new Function(\"a, b\", \"return a #{op} b\")\r\n  lbl = new Function(\"a, b\", \"return '('+a+' #{op} '+b+')';\")\r\n  (newLabel) ->\r\n    b = @pop()\r\n    a = @pop()\r\n\r\n    value = fn(a.value, b.value)\r\n    label = if a.label? && b.label? && (not newLabel?) then lbl(a.label, b.label) else undefined\r\n\r\n    @push value, (newLabel ? label)\r\n\r\nbinPred = (op) ->\r\n  fn = new Function(\"a, b\", \"return (a #{op} b) ? 1 : -1\")\r\n  lbl = new Function(\"a, b\", \"return '('+a+' #{op} '+b+')';\")\r\n  (newLabel) ->\r\n    b = @pop()\r\n    a = @pop()\r\n\r\n    value = fn(a.value, b.value)\r\n    label = if a.label? && b.label? && (not newLabel?) then lbl(a.label, b.label) else undefined\r\n\r\n    @push value, (newLabel ? label)\r\n\r\nglobal.SSMInstructionSet = {\r\n  add: binOp \"+\"\r\n  sub: binOp \"-\"\r\n  mul: binOp \"*\"\r\n  div: binOp \"/\"\r\n  mod: binOp \"%\"\r\n\r\n  neg: (newLabel) ->\r\n    {value, label} = @pop();\r\n    @push(-value, \"-(#{newLabel ? label})\")\r\n\r\n  eq: binPred \"==\"\r\n  ne: binPred \"!=\"\r\n  lt: binPred \"<\"\r\n  gt: binPred \">\"\r\n  le: binPred \"<=\"\r\n  ge: binPred \">=\"\r\n\r\n  or: binOp \"|\"\r\n  xor: binOp \"^\"\r\n\r\n  not: (newLabel) ->\r\n    {value, label} = @pop()\r\n    @push(value ^ 0xFFFF, \"!(#{newLabel ? a.label})\")\r\n\r\n  ldc: (a, label) ->\r\n    @push(a, label ? a)\r\n\r\n  ldr: (regHandle, label) ->\r\n    id = @regId(regHandle)\r\n    @push(@get(id), (label ? @get(id, 'label')))\r\n\r\n  str: (regHandle, newLabel) ->\r\n    {value, label} = @pop()\r\n    @set @regId(regHandle), value, (newLabel ? label)\r\n\r\n  lds: (n, label) ->\r\n    addr = @r[SP] + n\r\n    @push @read(addr), (label ? @read(addr, 'label'))\r\n    @mem.read[addr] = true;\r\n\r\n  sts: (n, newLabel) ->\r\n    {value, label} = @pop()\r\n    @write (@get(SP) + (n+1)), value, (newLabel ? label)\r\n\r\n  ldl: (n, newLabel) ->\r\n      @push @read(@get(MP) + n), (newLabel ? @read(@get(MP) + n, 'label'))\r\n\r\n  stl: (n, newLabel) ->\r\n      {value, label} = @pop()\r\n      @write (@get(MP) + n), value, (newLabel ? label)\r\n\r\n  brt: (addr) -> @jump(addr) if @pop().value == 1\r\n  brf: (addr) -> @jump(addr) if @pop().value != 1\r\n  bra: (addr) -> @jump(addr)\r\n  bsr: (addr) -> @push(@get(PC), \"PC return\"); @jump(addr)\r\n\r\n  link: (n) ->\r\n    @push(@get(MP), \"MP return\");\r\n    @set(MP, @get(SP))\r\n    for [0...n]\r\n      @push(0)\r\n\r\n  unlink: () ->\r\n    @set(SP, @get(MP))\r\n    @set(MP, @pop().value)\r\n\r\n  ret: (addr) -> @set(PC, @pop().value);\r\n\r\n  ajs: (n) -> @set(SP, @get(SP) + n)\r\n\r\n  halt: -> @halted = true\r\n\r\n  annote: (regHandle, low, high, color, text) ->\r\n    console.log regHandle\r\n    reg = @regId(regHandle)\r\n    console.log(@r[reg], low, high, color, text)\r\n    for i in [(@r[reg]+low)..(@r[reg]+high)]\r\n      console.log(i)\r\n      @mem.annote[i] = {color, text}\r\n\r\n  nop: ->\r\n\r\n  trap: (n) ->\r\n    [\r\n      (=> View.print(@peek()))\r\n    ][n]()\r\n\r\n}\r\n\r\nPC = 0\r\nSP = 1\r\nMP = 2\r\nHP = 3\r\nRR = 4\r\n\r\nclass MemoryBank\r\n  constructor: (length) ->\r\n    @buffer = buffer = new ArrayBuffer(length)\r\n\r\n    @f64 = new Float64Array(buffer)\r\n\r\n    @u32 = new Uint32Array(buffer)\r\n    @i32 = new Int32Array(buffer)\r\n    @f32 = new Float32Array(buffer)\r\n\r\n    @u16 = new Uint16Array(buffer)\r\n    @i16 = new Int16Array(buffer)\r\n\r\n    @u8 = new Uint8Array(buffer)\r\n    @i8 = new Int8Array(buffer)\r\n\r\n    @annote = {}\r\n    @label = {}\r\n\r\n    @written = {}\r\n    @read = {}\r\n\r\n    @raw = @u32\r\n    @int = @i32\r\n    @float = @f32\r\n\r\nclass global.SimpleCPU\r\n  constructor: (@instructions) ->\r\n    @code = []\r\n    @labels = {}\r\n    @reset()\r\n\r\n  reset: ->\r\n    @history = []\r\n\r\n    @memSize = 1024\r\n    @memSeen = -1\r\n\r\n    @mem = new MemoryBank(4 * @memSize)\r\n\r\n    @regCount = 8\r\n\r\n    @reg = new MemoryBank(4 * @regCount)\r\n    @r = @reg.int\r\n\r\n    @r[PC] = 0\r\n    @r[SP] = -1\r\n    @r[MP] = -1\r\n    @r[HP] = -1\r\n\r\n    @halted = false\r\n\r\n    @lineNr = @code[@r[PC]]?.lineNr ? false\r\n\r\n  write: (addr, value, label) ->\r\n    oldValue = @mem.int[addr];\r\n    oldLabel = @mem.label[addr];\r\n    oldWritten = @mem.written[addr];\r\n\r\n    @stateApply\r\n      do: ->\r\n        @mem.int[addr] = value;\r\n        @mem.written[addr] = true;\r\n\r\n        if label?\r\n          @mem.label[addr] = label;\r\n\r\n      undo: ->\r\n        @mem.int[addr] = oldValue\r\n        @mem.written[addr] = oldWritten;\r\n        @mem.label[addr] = oldLabel;\r\n\r\n  read: (addr, type) -> @stateApply\r\n    do: ->\r\n      @mem.read[addr] = true\r\n      @mem[type ? 'int'][addr]\r\n\r\n    undo: ->\r\n\r\n  set: (n, value, label) ->\r\n    oldValue = @reg.int[n];\r\n    oldLabel = @reg.label[n];\r\n    oldWritten = @reg.written[n];\r\n\r\n    @stateApply\r\n      do: ->\r\n        @reg.int[n] = value\r\n        @reg.written[n] = true\r\n\r\n        if label?\r\n          @reg.label[n] = label\r\n\r\n      undo: ->\r\n        @reg.int[n] = oldValue\r\n        @reg.written[n] = oldWritten;\r\n        @reg.label[n] = oldLabel;\r\n\r\n  get: (n, type) -> @stateApply\r\n    do: ->\r\n      @reg.read[n] = true\r\n      @reg[type ? 'int'][n]\r\n\r\n    undo: ->\r\n\r\n  jump: (addr) ->\r\n    oldPC = @r[PC];\r\n    oldLineNr = @lineNr\r\n\r\n    @stateApply\r\n      do: ->\r\n        @r[PC] = @labels[addr];\r\n        @lineNr = @code[@r[PC]]?.lineNr ? false\r\n\r\n      undo: ->\r\n        @r[PC] = oldPC;\r\n        @lineNr = oldLineNr;\r\n\r\n  pop: ->\r\n    @stateApply\r\n      do: ->\r\n        {value: @read(@r[SP]), label: @mem.label[@r[SP]--]}\r\n\r\n      undo: ->\r\n        @r[SP]++\r\n\r\n  push: (value, label) ->\r\n    oldMemSeen = @memSeen\r\n\r\n    @stateApply\r\n      do: ->\r\n        @write(++@r[SP], value, label)\r\n        @memSeen = Math.max(@memSeen, @r[SP])\r\n\r\n      undo: ->\r\n        @r[SP]--\r\n        @memSeen = oldMemSeen\r\n\r\n\r\n  peek: -> @stateApply\r\n    do: ->\r\n      @read(@r[SP])\r\n    undo: ->\r\n\r\n  regId: (handle) -> {\r\n    pc: PC\r\n    sp: SP\r\n    mp: MP\r\n    hp: HP\r\n    rr: RR\r\n  }[(new String(handle)).toLowerCase()] ? handle\r\n\r\n  regName: (id) -> [\"pc\", \"sp\", \"mp\", \"hp\", \"rr\"][id]?.toUpperCase()\r\n\r\n  regVal: (selector) ->\r\n    if +selector == selector\r\n      id = selector\r\n    else\r\n      id = @regId(selector)\r\n\r\n    return @r[id]\r\n\r\n  stateApply: (cmd) ->\r\n    @stepObject.stateActions.push(cmd)\r\n    cmd.do.call(this)\r\n\r\n  load: (@code) ->\r\n    @lineNr = @code[@r[PC]]?.lineNr\r\n    @labels = {}\r\n\r\n    addr = 0\r\n    for instruction in @code\r\n      if instruction.label\r\n        @labels[instruction.label] = addr\r\n      addr++\r\n\r\n  run: ->\r\n    while @step() == true\r\n      continue;\r\n    @mem.read = {}\r\n    @mem.written = {}\r\n    @reg.read = {}\r\n    @reg.written = {}\r\n    true\r\n\r\n  step: ->\r\n    if @halted\r\n      return false\r\n\r\n    @stepObject = {\r\n      oldPC: @r[PC],\r\n      stateActions: []\r\n    }\r\n\r\n    instruction = @code[@r[PC]++]\r\n    if not instruction?\r\n      @lineNr = false\r\n      @r[PC]--;\r\n      return false;\r\n\r\n\r\n    @exec(instruction)\r\n    @history.push(@stepObject)\r\n\r\n    @lineNr = @code[@r[PC]]?.lineNr\r\n    return true;\r\n\r\n  undo: ->\r\n    if not stepObject = @history.pop()\r\n      return;\r\n\r\n    while action = stepObject.stateActions.pop()\r\n      action.undo.call(this)\r\n    @r[PC] = stepObject.oldPC;\r\n    @lineNr = @code[@r[PC]]?.lineNr\r\n\r\n  exec: (instruction) ->\r\n    unless @instructions[instruction.opcode]?\r\n      throw new Error(\"Unknown opcode #{instruction.opcode}\")\r\n\r\n    args = [].concat(instruction.args, instruction.hint.label)\r\n    @instructions[instruction.opcode].apply(this, args)\r\n\r\n    return;\r\n"
  ]
}